#pragma kernel CSMain
#pragma kernel populate_positions
#define USHORT_MAX 0xffff
#define UINT_MAX 4294967295u
#define FLOAT_MAX 3.40282347E+38

//######################################################################
//################## Structures ########################################
//######################################################################

// struct Node{
//     uint box;
//     uint traversal;
//     uint block;
// };

struct Bounds{
    uint bmin;
    uint bmax;
};

struct Node{
    Bounds bounds;
    uint entry;
    uint exit;
    uint block;
};

struct Ray{
    float3 origin;
    float3 direction;
};

struct RayHit{
    bool hit;
    float distance;
};

struct Box{
    float3 min;
    float3 max;
};

struct InstanceData{
    float3 position;
    uint type;
};


//######################################################################
//################## Data ##############################################
//######################################################################
RWStructuredBuffer<Node> BvhBuffer;
AppendStructuredBuffer<InstanceData> InstanceDataBuffer;
RWTexture2D<float> depthBuffer;
//RWTexture2D<float4> rayTex;
RWBuffer<uint> HitsBuffer;
//RWBuffer<float3> rayCache;

float4x4 _CamToWorld;
float4x4 _CamInverseProjection;

uint root;
uint height;
uint width;
float3 chunkOffset;
uint2 pixelOffset;
int pixelScale;
float3 camPosition;


//######################################################################
//################## Helpers ###########################################
//######################################################################

//unpack a single uint to get 6 values for an AABB.
Box UnpackBox(Bounds box){
    Box b;
    b.min = float3(box.bmin&63, (box.bmin>>6)&63, (box.bmin>>12)&63) + chunkOffset;
    b.max = float3(box.bmax&63, (box.bmax>>6)&63, (box.bmax>>12)&63) + chunkOffset;
    return b;
}

// convert pixel coordinates to [-1,1] uv coordinates
float2 PixelToUv(uint2 position){
    // float2 uv = float2((position+float2(0.5, 0.5)) / float2(width, height) * 2.0f - 1.0f); 
    float2 uv = float2(position / float2(width, height) * 2.0f - 1.0f); 
    return uv;
}

//given a pixel coordinate, return a ScreenPoint2Ray
Ray GetCameraRay(uint2 screenpos){
    //convert pixel coordinates to a [-1, 1] range
    float2 uv = PixelToUv(screenpos);
    float3 direction = mul(_CamInverseProjection, float4(uv,0,1)).xyz;
    direction = mul(_CamToWorld, float4(direction, 0.0f)).xyz;
    direction = normalize(direction);

    Ray r;
    r.origin = camPosition;
    r.direction = direction;
    return r;
}

//Check if Ray `r` intersects with AABB `box`
RayHit CheckIntersect(Ray r, Bounds box){
    Box b = UnpackBox(box);
    float3 imin = (b.min - r.origin)/r.direction;
    float3 imax = (b.max - r.origin)/r.direction;

    float3 tmin = min(imin, imax);
    float3 tmax = max(imin, imax);

    float cmin = max(max(tmin.x, tmin.y), tmin.z);
    float cmax = min(min(tmax.x, tmax.y), tmax.z);

    RayHit result;
    result.hit = (cmin < cmax && cmax > 0);
    result.distance = cmin;

    return result;
}


//Traverse a BVH and set hits
void CheckBvh(Ray ray, uint2 pix){
    float distance = depthBuffer.Load(pix);
    // float distance = 1000;
    uint index = root;
    uint shape = USHORT_MAX;
    uint type = 0;
    while(index < UINT_MAX){
        Node node = BvhBuffer[index];
        Bounds b = node.bounds;
        RayHit check = CheckIntersect(ray, b);
        if(node.entry == UINT_MAX){
            if(check.hit && check.distance < distance){
                shape = (node.block & USHORT_MAX);
                type = (node.block >> 16)&USHORT_MAX;
                distance = check.distance;
                depthBuffer[pix] = distance;
            }
            index = node.exit;
        }else{
            if(check.hit){
                index = node.entry;
            }else{
                index = node.exit;
            }
        }
    }
    if(shape != USHORT_MAX){
        HitsBuffer[shape] = type;
    }
}

//######################################################################
//################## Main ##############################################
//######################################################################
[numthreads(16,16,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    uint2 pixel = id.xy + pixelOffset;
    Ray r = GetCameraRay(pixel);
    CheckBvh(r, pixel);
}

[numthreads(8,8,8)]
void populate_positions (uint3 id : SV_DispatchThreadID)
{
    uint idx = id.x*32*32+id.y*32+id.z;
    uint voxel = HitsBuffer[idx];
    if(voxel != 0){
        InstanceData idata;
        idata.position = float3(id)+chunkOffset;
        idata.type = voxel;
        InstanceDataBuffer.Append(idata);
    }
}