// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

#define UINT_MAX 4294967295u
#define USHORT_MAX 65535u
#define FLOAT_MAX 3.402823466E+38f

float4x4 _CamToWorld; //Camera to world matrix
float4x4 _CamInverseProjection; //Inversed camera projection matrix
float3 origin;

uint2 pixelOffset; //minimum point of the rectangle currently checking in.
uint height; //screen pixel height
uint width; //screen pixel width
float3 chunkOffset;
float3 offsetBounds;
int octantLookup[8][3] = {
    {4,2,1},
    {5,3,8},
    {6,8,3},
    {7,8,8},
    {8,6,5},
    {8,7,8},
    {8,8,7},
    {8,8,8},
};

struct ONode{
    uint children[4];
    uint parent;
    uint value;
};

struct RayMask{
    float3 t0;
    float3 t1;
    uint mask;
};

struct StackEntry{
    float3x3 ts;
    int octant;
};

struct ExitInfo{
    float3 qt0;
    float3 qt1;
    int octant;
};


RWStructuredBuffer<ONode> Tree;
RWBuffer<int> hits;



float3 GetCameraRay(uint2 screenpos){
    float2 uv = half2(screenpos / float2(width, height) * 2.0f - 1.0f); 
    float3 direction = mul(_CamInverseProjection, float4(uv,0,1)).xyz;
    direction = mul(_CamToWorld, float4(direction, 0.0f)).xyz;
    direction = normalize(direction);
    return direction;
}

uint GetChildIndex(ONode node, int octant){
   return (node.children[octant>>1]>>(octant&1))&0xffff;
}

RayMask GetRayMask(float3 direction){
    RayMask rm;
    float3 dir = direction;
    float3 ro = origin;
    uint mask = 0;
    if(direction.x < 0){
        mask += 4;
        dir.x *= -1;
        ro.x = offsetBounds.x-origin.x;
    }
    if(direction.y < 0){
        mask += 4;
        dir.y *= -1;
        ro.y = offsetBounds.y-origin.y;
    }
    if(direction.z < 0){
        mask += 4;
        dir.z *= -1;
        ro.z = offsetBounds.z-origin.z;
    }
    dir = 1/dir;
    rm.t0 = (chunkOffset-ro)*dir;
    rm.t1 = (chunkOffset+64-ro)*dir;
    rm.mask = mask;
    return rm;
}

uint GetFirstOctant(float3 t0, float3 tm){
    int o = 0;
    if(t0.x > max(t0.y, t0.z)){
        if(tm.y < t0.x)
            o |= 2;
        if(tm.z < t0.x)
            o |= 1;
    }
    else if(t0.y > max(t0.x,t0.z)){
        if(tm.x < t0.y)
            o |= 4;
        if(tm.z < t0.y)
            o |= 1;
    }else{
        if(tm.x < t0.z)
            o |= 4;
        if(tm.y < t0.z)
            o |= 2;
    }
    return o;
}

ExitInfo GetExitInfo(float3 t0, float3 tm, float3 t1, int octant){
    ExitInfo eo;
    switch(octant){
        case 0:
            eo.qt0 = t0;
            eo.qt1 = tm;
            break;
        case 1:
            eo.qt0 = float3(t0.x, t0.y, tm.z);
            eo.qt1 = float3(tm.x, tm.y, t1.z);
            break;
        case 2:
            eo.qt0 = float3(t0.x, tm.y, t0.z);
            eo.qt1 = float3(tm.x, t1.y, tm.z);
            break;
        case 3:
            eo.qt0 = float3(t0.x, tm.y, tm.z);
            eo.qt1 = float3(tm.x, t1.y, t1.z);
            break;
        case 4:
            eo.qt0 = float3(tm.x, t0.y, t0.z);
            eo.qt1 = float3(t1.x, tm.y, tm.z);
            break;
        case 5:
            eo.qt0 = float3(tm.x, t0.y, tm.z);
            eo.qt1 = float3(t1.x, tm.y, t1.z);
            break;
        case 6:
            eo.qt0 = float3(tm.x, tm.y, t0.z);
            eo.qt1 = float3(t1.x, t1.y, tm.z);
            break;
        case 7:
            eo.qt0 = tm;
            eo.qt1 = t1;
            break;
        default:
            eo.qt0 = tm;
            eo.qt1 = t1;
            break;
    }

    int exitPlane;
    if(eo.qt1.x < min(eo.qt1.y, eo.qt1.z)){
        exitPlane = 0;
    }else if(eo.qt1.y < min(eo.qt1.x, eo.qt1.z)){
        exitPlane = 1;
    }else{
        exitPlane = 2;
    }
    eo.octant = octantLookup[octant][exitPlane];
    return eo;
}

uint CheckLeaf(ONode child, float3 rayDir){
    float3 idir = 1/rayDir;
    uint val = child.value;
    float3 pos = float3(val&63, (val>>6)&63, (val>>12)&63) + chunkOffset;
    float3 t0 = (pos-origin)*idir;
    float3 t1 = (pos+64-origin)*idir;
    float3 s0 = min(t0, t1);
    float3 s1 = max(t0, t1);
    float tmin = min(s0.x, min(s0.y, s0.z));
    float tmax = max(s1.x, min(s1.y, s1.z));
    if(tmin<tmax)
        return val;
    return UINT_MAX;
}


uint CheckTree(float3 rayDir){
    RayMask rm = GetRayMask(rayDir);
    uint mask = rm.mask;
    uint nodeId = 0;
    int octant = -1;
    ONode node;
    StackEntry stack[6];
    int stackPtr = -1;
    uint i;
    float3x3 ts;
    ts[0] = rm.t0;
    ts[1] = (rm.t0+rm.t1)*0.5f;
    ts[2] = rm.t1;

    while((nodeId < USHORT_MAX) && i<200){
        i++;
        node = Tree[nodeId];

        //A node has just been exited. Pop stack
        if(octant>7){
            if(stackPtr < 1)
                return USHORT_MAX;
            nodeId = node.parent;
            StackEntry se = stack[stackPtr];
            stackPtr--;
            ts = se.ts;
            octant = se.octant;
            continue;
        }

        //Just entered a node. Find the octant of entry
        if(octant<0)
            octant = GetFirstOctant(ts[0], ts[1]);

        uint childIndex = GetChildIndex(node, octant^mask);
        ExitInfo ei = GetExitInfo(ts[0], ts[1], ts[2], octant);
        octant = ei.octant;
        if(childIndex == USHORT_MAX)
            continue;

        ONode child = Tree[childIndex];
        if(child.value != UINT_MAX){
            uint leafRes = CheckLeaf(child, rayDir);
            if(leafRes != UINT_MAX)
                return leafRes;
        }else{
            StackEntry se;
            se.ts = ts;
            se.octant = octant;
            stackPtr++;
            stack[stackPtr] = se;
            octant = -1;
            ts[0] = ei.qt0;
            ts[1] = (ei.qt0+ei.qt1)*0.5f;
            ts[2] = ei.qt1;
        }
    }

    return UINT_MAX;
}


[numthreads(1,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    float3 rayDir = GetCameraRay(uint2(101,100));
    uint res = CheckTree(rayDir);
    if(res != UINT_MAX){
        int idx = (res&63)*64*64 + ((res>>6)&63)*64 + (res>>12)&63;
        hits[idx] = (res>>24);
    }else{
        hits[0] = UINT_MAX;
    }
}